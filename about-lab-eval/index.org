# -*- org-image-actual-width: (64 128 256 512); openwith-associations: (("\.pdf\'" "evince" (file))); -*-
#+OPTIONS: num:nil html-postamble:t html-style:nil toc:nil
#+title: About Lab Eval 
#+subtitle: conversational ai: speech processing and synthesis
#+DATE: [2024-09-07 Sat]
#+AUTHOR: Raghav B. Venkataramaiyer
# #+AUTHOR: B.V. Raghav, Subham Kumar, Vinay P. Namboodiri
#+EMAIL: bv.raghav@thapar.edu
# #+EMAIL: bvraghav@iitk.ac.in, subhamkr@iitk.ac.in, vinaypn@iitk.ac.in
#+LANGUAGE: en

#+HTML_HEAD: <meta name="keywords" content="speech processing">

#+HTML_HEAD: <meta name="description" content="Initial notes for 
#+HTML_HEAD:   Course UCS749 Speech Synthesis and Processing">

#+HTML_HEAD: <meta name="viewport" content="width=device-width, initial-scale=1">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/css/dhiw.css" />
#+HTML_HEAD: <link rel="shortcut icon" type="image/png"
#+HTML_HEAD:   href="https://www.gravatar.com/avatar/034c3feded7a09f8a5c481a2bd35d676.png?s=16" />

#+HTML_HEAD: <style>
#+HTML_HEAD: .iframe-container {
#+HTML_HEAD:   overflow: hidden;
#+HTML_HEAD:   /* Calculated from the aspect ratio of the content (in case of 16:9 it is 9/16= 0.5625) */
#+HTML_HEAD:   padding-top: 56.25%;
#+HTML_HEAD:   position: relative;
#+HTML_HEAD:   margin-bottom: 1em;
#+HTML_HEAD: }
#+HTML_HEAD:  
#+HTML_HEAD: .iframe-container iframe {
#+HTML_HEAD:    border: 0;
#+HTML_HEAD:    height: 100%;
#+HTML_HEAD:    left: 0;
#+HTML_HEAD:    position: absolute;
#+HTML_HEAD:    top: 0;
#+HTML_HEAD:    width: 100%;
#+HTML_HEAD: }
#+HTML_HEAD: </style>

#+HTML_HEAD: <style type="text/css">
#+HTML_HEAD:  ol.alpha { list-style-type: lower-alpha; }
#+HTML_HEAD: </style>

#+PROPERTY: header-args+ :exports both :eval never-export
#+PROPERTY: header-args:python+ :results output replace verbatim

#+MACRO: cnc {{{sc(cnc)}}}

A candidate’s competence in practical programming
skills on the subject shall be evaluated on the given
date.  The procedure is simple,
+ [[#sec:setup-a-git-repo][Create a git repo]];
+ [[#sec:init-your-notebook][Init Colab Notebook]];
+ [[#sec:problem-solution][Solve the given problem]]; and
+ Commit back to repo;
+ Submit the Repo URL and Commit ID to [[https://docs.google.com/forms/d/e/1FAIpQLSc2aAG33E0rQgs3OsrpyjyREwy9OKK_WnKqmBLvD7pzM4sOvg/viewform?usp=sf_link][the Form]].
+ The eval is a timed exercise.  Mind your time
  accordingly.
+ *PS:* The form allows edits.

Remember:
1. All exercise(s) shall be solved in (Colab) python
   notebook(s), committed to Github using =@thapar.edu=
   account.
2. Only a Github Repo link and commit id shall be
   submit using [[https://docs.google.com/forms/d/e/1FAIpQLSc2aAG33E0rQgs3OsrpyjyREwy9OKK_WnKqmBLvD7pzM4sOvg/viewform?usp=sf_link][the Google Form]].  Any attachments are
   *not* allowed.

* Lab Eval Registration
:PROPERTIES:
:CUSTOM_ID: sec:lab-eval-registration
:END:


[[Https://docs.google.com/forms/d/e/1FAIpQLSc-H8QJBi-mwXsj7So3xqWmSC4aS-6eMI90ZNZXeEup6Wj1Rg/viewform?usp=sf_link][Register for Lab Eval]] using your Name, Email
(=@thapar.edu=), Roll No., Group and Viva-voce time
preference.

* Procedure
:PROPERTIES:
:CUSTOM_ID: sec:procedure
:END:

Practice using Colab with Github, as follows, so as to
relieve yourself of the burden during the event.


** Setup a Git Repo
:PROPERTIES:
:CUSTOM_ID: sec:setup-a-git-repo
:END:

1. Login to [[https://github.com/login][Github]], using =@thapar.edu= account.
2. Create a new repo named =<ROLLNO>-SESS_LE1=, /e.g./
   =102938478-SESS_LE1=; so that the link
   =https://github.com/<USER>/<ROLLNO>-SESS_LE1= is a
   valid Github Repo.  The repo may be private to avoid 
3. Grant read access to your instructor(s), namely
   =bv.raghav@thapar.edu=.

** Init your notebook
:PROPERTIES:
:CUSTOM_ID: sec:init-your-notebook
:END:

1. Open [[https://colab.research.google.com/github/tiet-ucs749/tiet-ucs749.github.io/blob/main/about-lab-eval/102xxxxxx_BvRaghav.ipynb][this colab]].
2. Login using =@thapar.edu= account.
3. Rename the file as =<ROLLNO>-<NAME>.ipynb=, and
   remove any whitespace within /e.g./
   =102938478-BvRaghav.ipynb=
4. Commit it to the root folder of your repository,
   using /“Save a copy in GitHub.”/ [[https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb#scrollTo=Saving_Notebooks_To_GitHub_or_Drive][[Read more…]​]]
   + The app will ask for authorisation.
   + Remember to check the /“Include a link to Colab”/
     option while saving.
   + *PS:* The authorisation may be revoked anytime
     after the eval.
5. The last step should automatically redirect to the
   latest version of this notebook, henceforth referred
   to as /NB/, on your GitHub Repo.  Click on badge
   /“Open in Colab.”/
   + If the badge does not show up, copy URL from the
     browser’s URL-bar, and [[https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb#scrollTo=Loading_Private_Notebooks][load your private notebook]].
6. Edit your response in /NB/.
7. To commit again, /“Save a copy in GitHub”/ from
   within /NB/.

** Problem/Solution
:PROPERTIES:
:CUSTOM_ID: sec:problem-solution
:END:

On the day of eval, the candidate will be assigned a
question (/e.g./ the sample question further in the
document).

1. Copy-paste the question verbatim into the =##
   Question= text block of the /NB/.  *PS:* Keep the
   heading intact.
2. Write the code.
3. Commit using /“Save a copy in GitHub”/ from within
   /NB/.
4. Submit your response as your Github Link and Git
   Commit into this [[https://docs.google.com/forms/d/e/1FAIpQLSc2aAG33E0rQgs3OsrpyjyREwy9OKK_WnKqmBLvD7pzM4sOvg/viewform?usp=sf_link][Response Form]].

* Sample Lab Eval Question
:PROPERTIES:
:CUSTOM_ID: sec:sample-lab-eval-question
:END:

Given the dimensionality =d= of inputs, a sequence =H=
of channel size for each hidden layer, and number of
classes =C=, define a function to
+ Take as argument a vector of raw inputs =x=;
+ Define a neural network classifier with =d= input
  channels, =len(H)= hidden layers, each subsequent
  layer bearing =[h1,h2,...]= channels finally
  resulting in =C= logits corresponding to each class;
+ Activate each intermediate layer with $\tanh$
  activation; and
+ Return the logits.

The function shall be tested for consistency,
correctness and efficiency as applicable.

In all cases the input will be in batches, where
batch-size is controlled by the end-user.

Use PyTorch/Tensorflow for implementation.  Use of
internet resources is dicouraged in the interest of
time, though not prohibited.

